vertex_program SpaceVS glsl //nombre para el shader
{
    source SpaceVS.glsl // nombre del archivo del código
    default_params // valores para las variable uniform
    {
    param_named_auto modelViewProjMat worldviewproj_matrix
    param_named_auto sinTime sintime_0_2pi 32
    }
}


fragment_program SpaceFS glsl //nombre para el shader
{
    source SpaceFS.glsl // nombre del archivo del código
    default_params // valores para las variable uniform
    {
    param_named textura1 int 0 // 1º unidad de textura ‐> *
    param_named textura2 int 1 // 2º unidad de textura ‐> *
    }
}


material practicaGLSL/spaceGLSL
{
    technique {
        pass {
            vertex_program_ref SpaceVS 
            { // params ‐> default_params
            }
            fragment_program_ref SpaceFS 
            { // params ‐> default_params
            }
            texture_unit { // Texture unit 0
            texture lightMap.jpg 2d
            tex_address_mode wrap
            }
            texture_unit { // Texture unit 1
            texture spaceSky.jpg 2d
            filtering bilinear
            }
        }
    } 
}

vertex_program HolesVS glsl
{
    source HolesVS.glsl // archivo código vertex shader
    default_params // valores para las variables uniform
    {
        param_named_auto modelViewMat worldview_matrix
        param_named_auto normalMat transpose_worldview_matrix
        param_named_auto modelViewProjMat worldviewproj_matrix
    }
}

fragment_program HolesFS glsl
{
    source HolesFS.glsl // archivo código fragment shader
    default_params // valores para las variables uniform
    {
         param_named textura1 int 0 // unidad de textura
         param_named textura2 int 1 // unidad de textura

         param_named OutColor float4 0.0 0.6 0.0 1.0
         param_named InColor  float4 1.0 1.0 0.0 1.0 

        param_named_auto     Flipping       render_target_flipping

        param_named_auto     lightPos           light_position              0 
        param_named_auto     lightAmbient       ambient_light_colour 
        param_named_auto     lightDiffuse       light_diffuse_colour        0
        param_named          materialDiffuse    float3 0.6 0.6 0.6
    }
}

material practicaGLSL/Holes 
{
    technique
    {
        pass
        {
            cull_hardware none  // para indicar que se rendericen ambas caras
            cull_software none
            vertex_program_ref HolesVS
            { // params ‐> default_params
            }
            fragment_program_ref HolesFS
            { // params ‐> default_params
            }
            texture_unit {
                texture corrosion.jpg 2d // archivo
                 tex_address_mode clamp
            }
            texture_unit {
                texture BumpyMetal.jpg 2d // archivo
                filtering bilinear  
            }
        
         }
    }
}  


vertex_program RenderQuadVS glsl
{
    source HolesVS.glsl // podemos reutilizar
    default_params{
            param_named_auto     modelViewMat       worldview_matrix
            param_named_auto    normalMat           transpose_worldview_matrix
            param_named_auto    modelViewProjMat    worldviewproj_matrix   
    }
}


fragment_program LuminanceFS glsl
{
    source LuminanceFS.glsl
    default_params
        {
            param_named RTT0 int 0 // textura con la escena
        }   
}

material practicaGLSL/LuminancePS 
{
    technique
    {
        pass 
        {
            depth_check off // desactivar el depth‐buffer
            depth_write off
            vertex_program_ref RenderQuadVS {}
            fragment_program_ref LuminanceFS {}
            texture_unit RTT0
            {
            // sin imagen de archivo ‐> previous render target
            filtering none // tiene la resolución del viewport
            tex_address_mode wrap
            }
        }
    } 
}



fragment_program Kernel3x3PS glsl
{
    source Kernel3x3PS.glsl
    default_params
        {
            param_named RTT0 int 0 // textura con la escena
            param_named kernel float9 0 0 0 0 1 0 0 0 0         }   
}

material practicaGLSL/EdgeEmbossPS 
{
    technique
    {
        pass 
        {
            depth_check off // desactivar el depth‐buffer
            depth_write off
            vertex_program_ref RenderQuadVS {}
            fragment_program_ref Kernel3x3PS {
            param_named kernel float9 -4 -2 0 -2 1 2 0 2 4 //

            }
            texture_unit RTT0
            {
            // sin imagen de archivo ‐> previous render target
            filtering none // tiene la resolución del viewport
            }
        }
    } 
}

